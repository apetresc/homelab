version: "3.7"

services:
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    deploy:
      labels:
        shepherd.enable: "true"
        traefik.enable: "true"
        traefik.http.routers.jackett.rule: "Host(`jackett.apetre.sc`)"
        traefik.http.routers.jackett.tls.certResolver: "r53resolver"
        traefik.http.routers.jackett.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.jackett.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.jackett.loadbalancer.server.port: 9117
        traefik.http.routers.jackett.middlewares: "authelia@docker"
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: jackett_config
        target: /config

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.tautulli.rule: "Host(`tautulli.apetre.sc`)"
        traefik.http.routers.tautulli.tls.certResolver: "r53resolver"
        traefik.http.routers.tautulli.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.tautulli.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.tautulli.loadbalancer.server.port: 8181
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - tautulli_config:/config

  ombi:
    image: lscr.io/linuxserver/ombi:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.ombi.rule: "Host(`ombi.apetre.sc`)"
        traefik.http.routers.ombi.tls.certResolver: "r53resolver"
        traefik.http.routers.ombi.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.ombi.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.ombi.loadbalancer.server.port: 3579
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - ombi_config:/config

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.sonarr.rule: "Host(`sonarr.apetre.sc`)"
        traefik.http.routers.sonarr.tls.certResolver: "r53resolver"
        traefik.http.routers.sonarr.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.sonarr.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.sonarr.loadbalancer.server.port: 8989
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: sonarr_config
        target: /config
      - type: volume
        source: shows
        target: /shows
      - type: volume
        source: anime
        target: /anime
      - type: volume
        source: unsorted
        target: /downloads

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.radarr.rule: "Host(`radarr.apetre.sc`)"
        traefik.http.routers.radarr.tls.certResolver: "r53resolver"
        traefik.http.routers.radarr.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.radarr.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.radarr.loadbalancer.server.port: 7878
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: radarr_config
        target: /config
      - type: volume
        source: movies
        target: /movies
      - type: volume
        source: unsorted
        target: /downloads

  radarr4k:
    image: lscr.io/linuxserver/radarr:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.radarr4k.rule: "Host(`radarr4k.apetre.sc`)"
        traefik.http.routers.radarr4k.tls.certResolver: "r53resolver"
        traefik.http.routers.radarr4k.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.radarr4k.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.radarr4k.loadbalancer.server.port: 7878
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: radarr4k_config
        target: /config
      - type: volume
        source: movies4k
        target: /movies
      - type: volume
        source: unsorted
        target: /downloads

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.lidarr.rule: "Host(`lidarr.apetre.sc`)"
        traefik.http.routers.lidarr.tls.certResolver: "r53resolver"
        traefik.http.routers.lidarr.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.lidarr.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.lidarr.loadbalancer.server.port: 8686
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: lidarr_config
        target: /config
      - type: volume
        source: music
        target: /music
        read_only: false

  calibre-web:
    image: ghcr.io/apetresc/calibre-web:0.6.24
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.calibre.rule: "Host(`calibre.apetre.sc`)"
        traefik.http.routers.calibre.tls.certResolver: "r53resolver"
        traefik.http.routers.calibre.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.calibre.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.calibre.loadbalancer.server.port: 8083
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - proxy
    volumes:
      - type: volume
        source: calibre_config
        target: /config
      - type: volume
        source: books
        target: /books
      - type: volume
        source: unsorted
        target: /unsorted
    secrets:
      - source: calibre_web_oauth_secret
        target: /config/client_secrets.json

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:2.4.4
    environment:
      - AUDIOBOOKSHELF_UID=1000
      - AUDIOBOOKSHELF_GID=1000
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.audiobookshelf.rule: "Host(`audiobookshelf.apetre.sc`)"
        traefik.http.routers.audiobookshelf.tls.certResolver: "r53resolver"
        traefik.http.routers.audiobookshelf.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.audiobookshelf.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.audiobookshelf.loadbalancer.server.port: 80
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - proxy
      - default
    volumes:
      - type: volume
        source: audiobookshelf_config
        target: /config
      - type: volume
        source: audiobookshelf_metadata
        target: /metadata
      - type: volume
        source: audiobooks
        target: /audiobooks

  komga:
    image: gotson/komga:1.21.2
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.komga.rule: "Host(`komga.apetre.sc`)"
        traefik.http.routers.komga.tls.certResolver: "r53resolver"
        traefik.http.routers.komga.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.komga.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.komga.loadbalancer.server.port: 25600
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    volumes:
      - type: volume
        source: komga_config
        target: /config
      - type: volume
        source: comics
        target: /data
    user: 1000:1000
    environment:
      - TZ=America/Toronto
      - JAVA_TOOL_OPTIONS=-Xmx4g
      - KOMGA_CORS_ALLOWED_ORIGINS=komf.apetre.sc

  komf:
    image: sndxr/komf:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.komf.rule: "Host(`komf.apetre.sc`)"
        traefik.http.routers.komf.tls.certResolver: "r53resolver"
        traefik.http.routers.komf.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.komf.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.komf.loadbalancer.server.port: 8085
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    user: "1000:1000"
    environment:
      - KOMF_KOMGA_BASE_URI=http://komga:25600
      - KOMF_KOMGA_USER=adrian@apetre.sc
      - KOMF_KOMGA_PASSWORD=qrb9Z9bafiCBJUS
      - KOMF_LOG_LEVEL=INFO
      # optional jvm options. Example config for low memory usage. Runs guaranteed cleanup up every 3600000ms(1hour)
      #- JAVA_TOOL_OPTIONS=-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact -XX:ShenandoahGuaranteedGCInterval=3600000 -XX:TrimNativeHeapInterval=3600000
    volumes:
      - type: volume
        source: komf_config
        target: /config

  mylar:
    image: lscr.io/linuxserver/mylar3:latest
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.mylar.rule: "Host(`mylar.apetre.sc`)"
        traefik.http.routers.mylar.tls.certResolver: "r53resolver"
        traefik.http.routers.mylar.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.mylar.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.mylar.loadbalancer.server.port: 8090
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - type: volume
        source: mylar_config
        target: /config
      - type: volume
        source: unsorted
        target: /downloads
      - type: volume
        source: comics_mylar
        target: /comics
      - type: volume
        source: comics
        target: /import

  airdcpp:
    image: gangefors/airdcpp-webclient:2.11.4
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.airdcpp.rule: "Host(`airdcpp.apetre.sc`)"
        traefik.http.routers.airdcpp.tls.certResolver: "r53resolver"
        traefik.http.routers.airdcpp.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.airdcpp.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.airdcpp.loadbalancer.server.port: 5600
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - proxy
    user: 1000:1000
    hostname: airdcpp
    environment:
      - TZ=America/Toronto
    ports:
      - target: 21248
        published: 21248
        protocol: tcp
        mode: host
      - target: 21248
        published: 21248
        protocol: udp
        mode: host
      - target: 21249
        published: 21249
        protocol: tcp
        mode: host
      - target: 21249
        published: 21249
        protocol: udp
        mode: host
    volumes:
      - type: volume
        source: airdcpp_data
        target: /.airdcpp
      - type: volume
        source: unsorted
        target: /Downloads
      - type: volume
        source: music
        target: /data/Music
      - type: volume
        source: shows
        target: /data/Shows
      - type: volume
        source: books
        target: /data/Books
      - type: volume
        source: comics
        target: /data/Comics
      - type: volume
        source: movies
        target: /data/Movies
      - type: volume
        source: anime
        target: /data/Anime

  plex:
    image: lscr.io/linuxserver/plex:latest
    deploy:
      placement:
        constraints:
          - node.labels.zpool == tank1
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
      - VERSION=docker
    configs:
      - source: plex_absolute_series_scanner
        target: "/config/Library/Application Support/Plex Media Server/Scanners/Series/Absolute Series Scanner.py"
    volumes:
      - plex_data:/config
      - /tank1/media/video/Movies:/movies
      - /tank1/media/video/Movies [4K]:/movies4k
      - /tank1/media/video/Shows:/shows
      - /tank1/media/video/Anime:/anime
      - /tank1/media/audio/Music:/music
      - /tank1/media/audio/Audiobooks:/audiobooks
    ports:
      - target: 32400
        published: 32400
        protocol: tcp
        mode: host
      - target: 1900
        published: 1900
        protocol: udp
        mode: host
      - target: 3005
        published: 3005
        protocol: tcp
        mode: host
      - target: 5353
        published: 5353
        protocol: udp
        mode: host
      - target: 8324
        published: 8324
        protocol: tcp
        mode: host
      - target: 32410
        published: 32410
        protocol: udp
        mode: host
      - target: 32412
        published: 32412
        protocol: udp
        mode: host
      - target: 32413
        published: 32413
        protocol: udp
        mode: host
      - target: 32414
        published: 32414
        protocol: udp
        mode: host
      - target: 32469
        published: 32469
        protocol: tcp
        mode: host

  qbittorrent:
    image: linuxserver/qbittorrent:14.3.9
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.qbittorrent.rule: "Host(`qbittorrent.apetre.sc`)"
        traefik.http.routers.qbittorrent.tls.certResolver: "r53resolver"
        traefik.http.routers.qbittorrent.tls.domains[0].main: "apetre.sc"
        traefik.http.routers.qbittorrent.tls.domains[0].sans: "*.apetre.sc"
        traefik.http.services.qbittorrent.loadbalancer.server.port: 8080
        traefik.http.routers.qbittorrent.middlewares: "authelia@docker"
        traefik.docker.network: proxy
      placement:
        constraints:
          - node.labels.zpool == tank2
    networks:
      - default
      - proxy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
      - WEBUI_PORT=8080
    configs:
      - source: qbittorrent_script_postprocess_torrent
        target: /config/scripts/postprocess-torrent
    volumes:
      - qbittorrent_config:/config
      - unsorted:/downloads
      - datasets:/datasets
      - media:/media
    ports:
      - target: 37881
        published: 37881
        protocol: tcp
        mode: host
      - target: 37881
        published: 37881
        protocol: udp
        mode: host


volumes:
  tautulli_config:
    driver: zfs
  ombi_config:
    driver: zfs
  lidarr_config:
    driver: zfs
  radarr_config:
    driver: zfs
  radarr4k_config:
    driver: zfs
  sonarr_config:
    driver: zfs
  komga_config:
    driver: zfs
  komf_config:
    driver: zfs
  mylar_config:
    driver: zfs
  jackett_config:
    driver: zfs
  calibre_config:
    driver: zfs
  airdcpp_data:
  audiobookshelf_config:
    driver: zfs
  audiobookshelf_metadata:
    driver: zfs
    driver: zfs
  plex_data:
  qbittorrent_config:
    driver: zfs
  audiobooks:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/audio/Audiobooks"
  music:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/audio/Music"
  movies:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/video/Movies"
  movies4k:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/video/Movies [4K]"
  shows:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/video/Shows"
  anime:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/video/Anime"
  p:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/rclone/freezer-crypt/.p"
  books:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/text/Books"
  comics:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/text/Comics"
  comics_mylar:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media/text/Comics/Komga/Comics"
  media:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/media"
  datasets:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/datasets"
  unsorted:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.130,soft,nolock
      device: ":/srv/nfs/tank1/unsorted"

networks:
  default:
  proxy:
    external: true

configs:
  qbittorrent_script_postprocess_torrent:
    file: ./scripts/postprocess-torrent
  plex_absolute_series_scanner:
    file: ./plex_plugins/Absolute Series Scanner.py
  komf_config:
    file: ./config/komf/application.yml

secrets:
  calibre_web_oauth_secret:
    external: true
